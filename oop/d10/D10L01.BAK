#include <iostream.h>
#include <conio.h>
//////


//geoshape
// abstract class
class GeoShape{
	public:
		float dim1, dim2;
	public:
		GeoShape(){ dim1 = dim2 = 0; }
		GeoShape( float x) { dim1 = dim2 = x ;}
		GeoShape( float x, float y) { dim1 = x, dim2 = y; }
		void setDim1(float x) { dim1 = x;}
		void setDim2(float x) { dim2 = x;}

		float getDim1() { return dim1;}
		float getDim2() { return dim2;}
		virtual	float calcArea() {return 0.0;}; // abstract method.


		//dinamic binding
		friend void sumAreas(GeoShape *ptr, int n);



};


class Rect: public GeoShape{
	public:
		Rect(float x, float y) : GeoShape(x,y) {}
		float calcArea() { return dim1 * dim2; }
};

// to avoid vaiolate

class Square: public Rect {
	public:
	Square(float x) : Rect(x,x) {}
	void setSide(int length){
		dim1 = dim2 = length;
	}
	float calcArea() {
		return dim1 * dim2;
	}




};

class Triangle : public GeoShape{
	public:
		Triangle(float b, float h): GeoShape(b,h){}
		float calcArea(){
			return 0.5 * dim1 * dim2;}


};
class Circle : public GeoShape {
	public:
		Circle(float r) : GeoShape(r) {}
		float calcArea() {return 22/7 * dim1 * dim2; }

		void setRadius(float rad){ dim1 = dim2 = rad ;}

};

//float sumAreas(GeoShape *r1, GeoShape *r2, GeoShape *r3);

int main(){

	clrscr();
	// error cannot create object from abstract class.
   //	GeoShape obj;







	Rect r1(1,2), r2(5,10);

	Square s1(10), s2(20), s3(30);
	Circle c1(30);
	Triangle t1(10,20), t2(20,40);

	GeoShape *ptr = new GeoShape[3];

	ptr[0] = s1;
	ptr[1] = t2;
	ptr[2] = c1;




	sumAreas(ptr,3);
	//cout << sumAreas(&t1,&c1,&r2) << endl;
   //	cout << sumAreas(&r1,&s2,&t2) << endl;



	getch();

	return 0;

}





/////dinamic binding
void sumAreas(GeoShape *ptr, int n){
			int i;
			for(i=0; i<n; i++){
				 cout <<  (*ptr[i])->calcArea() <<endl;

			}




	}


